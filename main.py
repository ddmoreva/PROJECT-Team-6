import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import pandas as pd
import nltk
from nltk.corpus import stopwords
from nltk.stem.snowball import SnowballStemmer
from string import punctuation
from nltk.tokenize import TweetTokenizer
from PIL import Image
import io

try:
    df = pd.read_parquet("hf://datasets/foldl/rumeme-desc/data/train-00000-of-00001.parquet")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    df = pd.DataFrame()

tw = TweetTokenizer()
stemmer = SnowballStemmer("russian")
bot = telebot.TeleBot("8360335691:AAHWPxcarTLRdcfkUUxmPWcansyPYy6rT_w")
user_data = {}
nltk.download('stopwords', quiet=True)
stop = stopwords.words("russian")


def custom_stem_tokenizer(text):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä—É–µ—Ç, —É–¥–∞–ª—è–µ—Ç —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é,
    –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–µ–º–º–∏–Ω–≥.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        text (list): –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (–æ–ø–∏—Å–∞–Ω–∏–π –º–µ–º–æ–≤ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤)

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        list: –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
    """
    transformed = []
    for description in text:
        description = description.lower()
        tokenized = tw.tokenize(description)
        tokens = [stemmer.stem(token) for token in tokenized
                  if token not in stop
                  and token not in punctuation
                  and not (len(token) == 1 and ord(token) >= 128)]
        transformed.append(tokens)
    return transformed


def count_matches(row_tokens, search_tokens):
    """
    –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å–ª–æ–≤ –º–µ–∂–¥—É –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–µ–º–∞ –∏ –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        row_tokens (list): –°–ª–æ–≤–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ–º–∞
        search_tokens (list): –°–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö —Å–ª–æ–≤
    """
    return len(set(row_tokens).intersection(set(search_tokens)))


def get_main_menu():
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        InlineKeyboardMarkup: –ì–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    markup = InlineKeyboardMarkup()
    btn_start = InlineKeyboardButton("üöÄ –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫!", callback_data="start_search")
    btn_help = InlineKeyboardButton("üÜò –ø–æ–º–æ–≥–∏—Ç–µ, –Ω–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º", url="https://t.me/ksujpg")
    markup.add(btn_start)
    markup.add(btn_help)
    return markup


def send_next_meme(user_id):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    - –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ–º–∞
    - –ò—Å–∫–ª—é—á–∞–µ—Ç —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ–º—ã
    - –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ (–º–∞–∫—Å. 3)
    - –ï—Å–ª–∏ –º–µ–º–æ–≤ –Ω–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
    """
    if user_id not in user_data:
        user_data[user_id] = {
            'attempts': 1,
            'shown_indices': set(),
            'finished': False,
            'search_tokens': []
        }

    data = user_data[user_id]
    if data['attempts'] > 3:
        bot.send_message(user_id, "–ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ —Å–ª–æ–≤–∞")
        return

    df['matches'] = df['stan'].apply(
        lambda x: len(set(x).intersection(set(data['search_tokens'])))
    )

    candidates = df[~df.index.isin(data['shown_indices'])]
    if candidates.empty or candidates['matches'].max() == 0:
        bot.send_message(user_id, "–ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        user_data.pop(user_id, None)
        markup = get_main_menu()
        bot.send_message(user_id, "–ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ —Å–ª–æ–≤–∞!", reply_markup=markup)
        return

    best_idx = candidates['matches'].idxmax()
    row = df.loc[best_idx]
    image_bytes = row['image']['bytes']
    image = Image.open(io.BytesIO(image_bytes))
    img_io = io.BytesIO()
    image.save(img_io, 'PNG')
    img_io.seek(0)
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("–æ–∫", callback_data="ok"),
        InlineKeyboardButton("–Ω–µ –æ–∫", callback_data="not_ok")
    )
    bot.send_photo(user_id, img_io, caption="–≤–æ—Ç —Ç–∞–∫–æ–π –º–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–±–µ?", reply_markup=markup)
    data['shown_indices'].add(best_idx)


def has_active_search(user_id) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–¥—ë—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –º–µ–º–∞.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        bool: True ‚Äî –µ—Å–ª–∏ –ø–æ–∏—Å–∫ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω –∏ –ø–æ–ø—ã—Ç–∫–∏ < 4
    """
    if user_id not in user_data:
        return False

    data = user_data[user_id]
    return (
            data.get('attempts', 0) < 4
            and not data.get('finished', True)
    )


def start_new_search(user_id, query_text):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –º–µ–º–∞.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query_text (str): –¢–µ–∫—Å—Ç, –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    user_data[user_id] = {
        'attempts': 1,
        'shown_indices': set(),
        'finished': False
    }

    try:
        search_tokens = custom_stem_tokenizer([query_text])[0]
        user_data[user_id]['search_tokens'] = search_tokens
    except:
        bot.send_message(user_id, "–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    if 'stan' not in df.columns:
        df['stan'] = custom_stem_tokenizer(df['text'].fillna("").tolist())

    send_next_meme(user_id)


@bot.message_handler(commands=['start'])
def start(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.chat.id
    user_data[user_id] = {'attempts': 0}
    markup = get_main_menu()
    bot.send_message(
        user_id,
        "–ø—Ä–∏–≤–µ—Ç! —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –º–µ–º –ø–æ —Ç–≤–æ–∏–º —Å–ª–æ–≤–∞–º.",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == "start_search")
def handle_start_button(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫!".

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        call: –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
    """
    user_id = call.message.chat.id

    try:
        bot.delete_message(chat_id=user_id, message_id=user_id)
    except:
        pass

    bot.send_message(user_id, "—Å—É–ø–µ—Ä! –≤–≤–µ–¥–∏ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ–º–∞.")


@bot.callback_query_handler(func=lambda call: call.data in ["ok", "not_ok"])
def handle_button(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ "–æ–∫" / "–Ω–µ –æ–∫".

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        call: –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
    """
    user_id = call.message.chat.id
    data = user_data.get(user_id, {})

    if call.data == "ok":
        bot.send_message(user_id, "—É—Ä–∞–∞–∞–∞ –Ω–∞—à–ª–∏ üéâ")
        user_data[user_id]['attempts'] = 0
        bot.delete_message(chat_id=user_id, message_id=user_id)
        markup = get_main_menu()
        bot.send_message(user_id, "—Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –µ—â—ë –æ–¥–∏–Ω –º–µ–º?", reply_markup=markup)

    elif call.data == "not_ok":
        data['attempts'] += 1
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        send_next_meme(user_id)


@bot.message_handler(func=lambda message: True)
def process_first_query(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.chat.id

    if message.content_type != 'text':
        bot.send_message(
            user_id,
            "–ø–ª–∏–∑, –≤–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ–º–∞. –º—ã –µ—â–µ –Ω–µ —Å–ª–∏—à–∫–æ–º —Ö–æ—Ä–æ—à–∏, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å—ã."
        )

        markup = get_main_menu()
        bot.send_message(user_id, "–Ω—É —á–µ, –ø—Ä–∏—Å—Ç—É–ø–∏–º?", reply_markup=markup)
        return

    if message.text.startswith('/'):
        return

    if has_active_search(user_id):
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("–Ω–∞—á–∏–Ω–∞–µ–º –ø–æ –Ω–æ–≤–æ–π", callback_data="new_search"),
            InlineKeyboardButton("–∏–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–∫–∞—Ç—å", callback_data="continue_search")
        )
        bot.send_message(
            user_id,
            "—É —Ç–µ–±—è —É–∂–µ –∏–¥—ë—Ç –ø–æ–∏—Å–∫! —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=markup
        )
        return

    start_new_search(user_id, message.text)


@bot.callback_query_handler(func=lambda call: call.data in ["new_search", "continue_search"])
def handle_search_choice(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä: –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞—Ä—ã–π.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        call: –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
    """
    user_id = call.message.chat.id

    try:
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    except:
        pass

    if call.data == "new_search":
        bot.send_message(user_id, "–æ–∫–µ–π! –≤–≤–µ–¥–∏ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ–º–∞.")
        user_data[user_id]['awaiting_new_query'] = True

    elif call.data == "continue_search":
        bot.send_message(user_id, "–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ–∏—Å–∫!")
        send_next_meme(user_id)


bot.polling(none_stop=True)